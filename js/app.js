// - name: identificador √∫nico
// - text: mensagem que ser√° exibida ao usu√°rio
// - test: fun√ß√£o que retorna true/false para validar a senha
//
// IMPLEMENTA√á√ÉO: fases de valida√ß√£o
//  - fase 1: requisitos 1..7 (√≠ndices 0..6)
//  - fase 2: requisitos 8..9 (√≠ndices 7..8)
//  - fase 3: requisitos 10..13 (√≠ndices 9..12) -> allUpperVowels, emoji, upEmoji, greceFlag
//  - fase 4: restante (a √∫ltima fase abrange at√© o fim da lista atual)
// Observa√ß√µes:
//  - A fase nunca retrocede automaticamente (validationPhase s√≥ aumenta quando o usu√°rio clica Entrar no fim de uma fase).
//  - Nenhuma fase limpa a senha ou remove requisitos anteriores ‚Äî a lista de valida√ß√µes √© sempre cumulativa.
//  - O bot√£o "Entrar" fica visualmente desabilitado nas fases intermedi√°rias at√© os requisitos e confirma√ß√£o serem atendidos,
//    mas permanece clic√°vel para que o submit ocorra e as mensagens de erro sejam exibidas.
// ================================================================

const passwordValidations = [
    // Primeira fase
    {
        name: 'length',
        text: 'M√≠nimo 5 caracteres',
        test: (password) => password.length >= 5
    },
    {
        name: 'uppercase',
        text: 'Pelo menos uma letra mai√∫scula',
        test: (password) => /[A-Z]/.test(password)
    },
    {
        name: 'lowercase',
        text: 'Pelo menos uma letra min√∫scula',
        test: (password) => /[a-z]/.test(password)
    },
    {
        name: 'number',
        text: 'Pelo menos um n√∫mero',
        test: (password) => /[0-9]/.test(password)
    },
    {
        name: 'special',
        text: 'Pelo menos um caractere especial (!@#$%^&*)',
        test: (password) => /[!@#$%^&*(),.?":{}|<>]/.test(password)
    },
    {
        name: 'year',
        text: 'Precisa conter o ano atual',
        test: (password) => password.includes(new Date().getFullYear().toString())
    },
    {
        name: 'startsWithB',
        text: 'A senha deve come√ßar com a letra B',
        // Corrigido: uses case-insensitive check for initial 'b'
        test: (password) => /^b/i.test(password)
    },
    // Segunda fase
    {
        name: 'leapYearDays',
        text: 'A senha deve conter o n√∫mero de dias de um ano bissexto',
        test: (password) => password.includes('366')
    },
    {
        name: 'europeanCountry',
        text: 'A senha deve conter o nome de um pa√≠s da Europa',
        // Tornado case-insensitive para diminuir falsos negativos
        test: (password) => europeanCountries.some(country => password.toLowerCase().includes(country.toLowerCase()))
    },
    // Terceira fase
    {
        name: 'allUpperVowels',
        text: 'Precisa conter todas as vogais em mai√∫sculo',
        test: (password) => /A.*E.*I.*O.*U/.test(password)
    },
    {
        name: 'emoji',
        text: 'Pelo menos um emoji',
        test: (password) => /[\u{1F300}-\u{1FAFF}]/u.test(password)
    },
    {
        name: 'upEmoji',
        getText: (password) => {
            if (/üñï/u.test(password)) {
                return 'N√£o use o dedo do meio, seu mal educado!';
            }
            return 'Precisa apontar para cima';
        },
        test: (password) => {
            const hasUpEmoji = /(?:üëÜ|‚òùÔ∏è|‚¨ÜÔ∏è)/u.test(password);
            const hasMiddleFinger = /üñï/u.test(password);
            return hasUpEmoji && !hasMiddleFinger;
        }
    },
    {
        name: 'greceFlag',
        text: 'Precisa conter a bandeira da Gr√©cia',
        test: (password) => /üá¨üá∑/.test(password)
    },
    // Quarta fase
    {
        name: 'nameOfTheBestTeacher',
        text: 'Precisa conter o nome do melhor professor de WEB I',
        test: (password) => /Karan/.test(password)
    },
    {
        name: 'flagInTheFourthPosition',
        text: 'A bandeira da Gr√©cia deve estar na quarta posi√ß√£o',
        // Observa√ß√£o: com emojis a contagem de posi√ß√µes pode variar; usamos indexOf para simplificar.
        test: (password) => password.indexOf('üá¨üá∑') === 3
    },
    {
        name: 'harryPotterSpell',
        text: 'Precisa conter um feiti√ßo de Harry Potter',
        test: (password) => /(Alohomora|Expelliarmus|Lumos|Nox|Expecto Patronum)/.test(password)
    },
    {
        name: 'lightningPokemon',
        text: 'Precisa conter o nome de um Pok√©mon do tipo el√©trico',
        test: (password) => /(Pikachu|Raichu|Electabuzz|Jolteon|Zapdos)/i.test(password)
    }
];

// Lista de pa√≠ses europeus em portugu√™s
const europeanCountries = [
    "Alb√¢nia", "Alemanha", "Andorra", "√Åustria", "B√©lgica", "Bielorr√∫ssia", "B√≥snia e Herzegovina", "Bulg√°ria",
    "Chipre", "Cro√°cia", "Dinamarca", "Eslov√°quia", "Eslov√™nia", "Espanha", "Est√¥nia", "Finl√¢ndia", "Fran√ßa",
    "Ge√≥rgia", "Gr√©cia", "Hungria", "Irlanda", "Isl√¢ndia", "It√°lia", "Kosovo", "Let√¥nia", "Liechtenstein",
    "Litu√¢nia", "Luxemburgo", "Maced√¥nia do Norte", "Malta", "Mold√°via", "M√¥naco", "Montenegro", "Noruega",
    "Pa√≠ses Baixos", "Pol√¥nia", "Portugal", "Reino Unido", "Rep√∫blica Tcheca", "Rom√™nia", "R√∫ssia", "San Marino",
    "S√©rvia", "Su√©cia", "Su√≠√ßa", "Turquia", "Ucr√¢nia", "Vaticano"
];

// Fase de valida√ß√£o: 1 = inicial, 2 = p√≥s-loader, 3 = p√≥s-loader2, 4 = fase final
let validationPhase = 1;

// Mapeamento dos √≠ndices finais (slice end) para cada fase (n√£o inclusivo)
// Ajustado: fase 3 agora termina em 13 (slice(0,13) inclui √≠ndices 0..12 -> inclui 4 itens na fase 3)
const phaseEndIndices = {
    1: 7,                           // valida√ß√µes[0..6] -> slice(0,7)
    2: 9,                           // valida√ß√µes[0..8] -> slice(0,9)
    3: 13,                          // valida√ß√µes[0..12] -> slice(0,13) (fase 3 inclui 4 itens)
    4: passwordValidations.length   // √∫ltima fase vai at√© o fim da lista atual
};

// visualiza√ß√£o dos requisitos na tela
const toggleButtons = document.querySelectorAll('.toggle-password');

toggleButtons.forEach(button => {
    button.addEventListener('click', function () {
        const targetId = this.getAttribute('data-target');
        const input = document.getElementById(targetId);

        // INVERTIDO: agora, o input come√ßa VIS√çVEL (type="text").
        // Ao clicar: se estiver vis√≠vel -> escondemos (type='password') e marcamos active (√≠cone fechado).
        // Se estiver escondido -> mostramos (type='text') e removemos active (√≠cone aberto).
        if (input.type === 'text') {
            input.type = 'password';
            this.classList.add('active'); // active = escondido (olho fechado)
        } else {
            input.type = 'text';
            this.classList.remove('active');
        }
    });

    // remove outline ao focar (ajuda a evitar "efeito estranho" visual)
    button.addEventListener('focus', function () {
        this.style.outline = 'none';
    });
});

// l√≥gica de valida√ß√£o
const passwordInput = document.getElementById('password');
const confirmInput = document.getElementById('confirmPassword');
const passwordRequirements = document.getElementById('passwordRequirements');
const currentRequirementText = document.getElementById('currentRequirement');
const requirementElement = document.querySelector('.requirement-single');
const submitButton = document.querySelector('.btn-submit');
const loginForm = document.getElementById('loginForm');

passwordInput.addEventListener('focus', function () {
    passwordRequirements.classList.add('show');
    updatePasswordRequirement(this.value);
});

passwordInput.addEventListener('blur', function () {
    if (this.value === '') {
        passwordRequirements.classList.remove('show');
    }
});

// Controle din√¢mico de fase ao digitar
passwordInput.addEventListener('input', function () {
    // IMPORTANT: N√£o retroceder fases automaticamente ‚Äî validationPhase s√≥ avan√ßa ao submeter.
    updatePasswordRequirement(this.value);
    // Quando o usu√°rio digita, limpamos poss√≠veis mensagens espec√≠ficas de erro
    clearFieldError('password');
    // atualiza estado visual do bot√£o (mas o bot√£o permanece clic√°vel)
    setButtonState();
});

confirmInput.addEventListener('input', function () {
    // Atualiza estado do bot√£o sempre que o confirm mudar
    clearFieldError('confirmPassword');
    setButtonState();
});

function getCurrentValidations() {
    // Retorna as valida√ß√µes acumuladas at√© o fim da fase atual (n√£o retrocede)
    const end = phaseEndIndices[validationPhase] || passwordValidations.length;
    return passwordValidations.slice(0, end);
}

// fun√ß√£o para verificar se a senha atende a todos os requisitos
// Valida todos os requisitos acumulados at√© a fase atual
function isPasswordValid(password) {
    return getCurrentValidations().every(validation => validation.test(password));
}

// Determina se o bot√£o "Entrar" pode **visualmente** parecer habilitado:
// - somente se n√£o for a √∫ltima fase (1..3) e
// - todas as valida√ß√µes acumuladas at√© o fim da fase atual estiverem satisfeitas e
// - senha e confirma√ß√£o coincidirem
function canSubmitNow() {
    const isFinalPhase = validationPhase === 4;
    if (isFinalPhase) return false;
    const allPassed = getCurrentValidations().every(v => v.test(passwordInput.value));
    const passwordsMatch = passwordInput.value !== '' && passwordInput.value === confirmInput.value;
    return allPassed && passwordsMatch;
}

// Controla o estado visual do bot√£o (classe 'disabled' e aria-disabled)
// OBS: deixamos o bot√£o clic√°vel sempre, para que o submit ocorra e exiba erros quando necess√°rio
function setButtonState() {
    if (canSubmitNow()) {
        submitButton.classList.remove('disabled');
        submitButton.setAttribute('aria-disabled', 'false');
    } else {
        submitButton.classList.add('disabled');
        submitButton.setAttribute('aria-disabled', 'true');
    }
}

function updatePasswordRequirement(password) {
    const validationsToCheck = getCurrentValidations();
    const unmetRequirement = validationsToCheck.find(validation => !validation.test(password));

    if (unmetRequirement) {
        // texto pode ser getText (din√¢mico) ou text
        const message = unmetRequirement.getText ? unmetRequirement.getText(password) : unmetRequirement.text;
        currentRequirementText.textContent = message;
        requirementElement.classList.remove('valid');
        requirementElement.querySelector('.icon').textContent = '‚úó';
        // bot√£o visual atualizado
        setButtonState();
    } else {
        currentRequirementText.textContent = 'Todos os requisitos atendidos!';
        requirementElement.classList.add('valid');
        requirementElement.querySelector('.icon').textContent = '‚úì';
        setButtonState();
    }
}

// Inicializa estado visual do bot√£o
setButtonState();

// === CAPTCHA: configura√ß√£o e l√≥gica ===
// imagem do captcha (coloque sua imagem em assets/captcha.jpg)
const captchaImageSrc = 'assets/captcha.jpg'; // altere se necess√°rio
const captchaModal = document.getElementById('captchaModal');
const mainCanvas = document.getElementById('mainCanvas');
const pieceCanvas = document.getElementById('pieceCanvas');
const captchaMessage = document.getElementById('captchaMessage');

let mainCtx, pieceCtx;
let img, scale = 1;
let pieceSize = 60; // ser√° reajustado dinamicamente
let targetX = 0, targetY = 0;
let pieceStartX = 12, pieceStartY = 0;
let dragging = false;
let dragOffsetX = 0;
let tolerance = 12; // toler√¢ncia de encaixe em pixels (ajuste se quiser)
let solvedCallback = null;

// Inicializa o captcha (carrega imagem e desenha)
function initCaptcha(callback) {
    solvedCallback = callback || null;
    captchaMessage.textContent = '';
    captchaMessage.className = 'captcha-message';
    img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = () => {
        // dimensionamento para caber no modal
        const maxWidth = 420;
        scale = Math.min(1, maxWidth / img.width);
        const width = Math.round(img.width * scale);
        const height = Math.round(img.height * scale);

        mainCanvas.width = width;
        mainCanvas.height = height;
        pieceCanvas.width = width; // canvas da pe√ßa usar√° largura total para facilitar posicionamento absoluto
        pieceCanvas.height = height;

        mainCtx = mainCanvas.getContext('2d');
        pieceCtx = pieceCanvas.getContext('2d');

        // desenha a imagem inteira no main
        mainCtx.clearRect(0,0,width,height);
        mainCtx.drawImage(img, 0, 0, width, height);

        // calcula tamanho da pe√ßa proporcional √† imagem
        pieceSize = Math.max(40, Math.round(Math.min(width, height) * 0.18));

        // escolhe posi√ß√£o alvo aleat√≥ria dentro da imagem
        targetX = Math.floor(width * 0.35 + Math.random() * (width * 0.3));
        targetY = Math.floor(10 + Math.random() * (height - pieceSize - 20));

        // extrai a pe√ßa da imagem e desenha na pieceCanvas (inicialmente deslocada)
        drawPieceAndHole(width, height);

        // posiciona a pieceCanvas inicialmente deslocada √† esquerda
        pieceStartX = 12;
        pieceStartY = targetY;
        pieceCanvas.style.left = pieceStartX + 'px';
        pieceCanvas.style.top = pieceStartY + 'px';

        // ativa os eventos de arrastar
        attachPieceEvents();

        // exibe modal
        showCaptchaModal(true);
    };
    img.onerror = () => {
        // fallback: se imagem falhar, avise usu√°rio
        captchaMessage.textContent = 'Erro ao carregar a imagem do captcha.';
        captchaMessage.classList.add('error');
    };
    img.src = captchaImageSrc;
}

function drawPieceAndHole(width, height) {
    // Limpa contextos
    mainCtx.clearRect(0,0,width,height);
    mainCtx.drawImage(img, 0, 0, width, height);

    // cria um canvas tempor√°rio para a pe√ßa
    const tmp = document.createElement('canvas');
    tmp.width = pieceSize;
    tmp.height = pieceSize;
    const tmpCtx = tmp.getContext('2d');

    // copiar a por√ß√£o da imagem (sx,sy) = (targetX,targetY)
    tmpCtx.drawImage(mainCanvas, targetX, targetY, pieceSize, pieceSize, 0, 0, pieceSize, pieceSize);

    // desenha um leve efeito de borda na pe√ßa para indicar forma (opcional)
    tmpCtx.globalCompositeOperation = 'source-over';
    tmpCtx.strokeStyle = 'rgba(0,0,0,0.2)';
    tmpCtx.lineWidth = 2;
    tmpCtx.strokeRect(0.5,0.5,pieceSize-1,pieceSize-1);

    // desenha a pe√ßa no pieceCanvas em posi√ß√£o (startX,startY)
    pieceCtx.clearRect(0,0,pieceCanvas.width,pieceCanvas.height);
    // posicione o bitmap da pe√ßa no pieceCanvas, em x = pieceStartX (ser√° ajustado)
    pieceCtx.drawImage(tmp, 0, 0, pieceSize, pieceSize, pieceStartX, pieceStartY, pieceSize, pieceSize);

    // agora "recortamos" o buraco na mainCanvas na posi√ß√£o alvo
    mainCtx.save();
    mainCtx.globalCompositeOperation = 'destination-out';
    // forma da pe√ßa: ret√¢ngulo arredondado (voc√™ pode desenhar formato mais complexo se quiser)
    roundRect(mainCtx, targetX, targetY, pieceSize, pieceSize, 6);
    mainCtx.fill();
    mainCtx.restore();

    // desenha um contorno leve ao redor do buraco para dar pista
    mainCtx.save();
    mainCtx.strokeStyle = 'rgba(0,0,0,0.12)';
    mainCtx.lineWidth = 2;
    roundRect(mainCtx, targetX+0.5, targetY+0.5, pieceSize-1, pieceSize-1, 6);
    mainCtx.stroke();
    mainCtx.restore();
}

function roundRect(ctx, x, y, w, h, r) {
    ctx.beginPath();
    ctx.moveTo(x + r, y);
    ctx.arcTo(x + w, y, x + w, y + h, r);
    ctx.arcTo(x + w, y + h, x, y + h, r);
    ctx.arcTo(x, y + h, x, y, r);
    ctx.arcTo(x, y, x + w, y, r);
    ctx.closePath();
}

// Eventos de arrastar (pointer events)
function attachPieceEvents() {
    pieceCanvas.style.touchAction = 'none';
    pieceCanvas.addEventListener('pointerdown', onPointerDown);
    pieceCanvas.addEventListener('pointermove', onPointerMove);
    pieceCanvas.addEventListener('pointerup', onPointerUp);
    pieceCanvas.addEventListener('pointercancel', onPointerUp);
}

function onPointerDown(e) {
    e.preventDefault();
    dragging = true;
    pieceCanvas.setPointerCapture(e.pointerId);

    // calcular offset entre ponto do click e o canto do elemento
    const rect = pieceCanvas.getBoundingClientRect();
    dragOffsetX = e.clientX - rect.left;
    pieceCanvas.style.cursor = 'grabbing';
}

function onPointerMove(e) {
    if (!dragging) return;
    e.preventDefault();
    const stageRect = mainCanvas.getBoundingClientRect();

    // calc newLeft em rela√ß√£o ao container (mantemos vertical fixo)
    let newLeft = e.clientX - stageRect.left - dragOffsetX;
    // limitar dentro do stage
    const minLeft = 6;
    const maxLeft = stageRect.width - pieceSize - 6;
    newLeft = Math.max(minLeft, Math.min(maxLeft, newLeft));

    // aplicamos novo left (transform para performance)
    pieceCanvas.style.left = (newLeft) + 'px';
    // top permanece pieceStartY
}

function onPointerUp(e) {
    if (!dragging) return;
    dragging = false;
    pieceCanvas.releasePointerCapture && pieceCanvas.releasePointerCapture(e.pointerId);
    pieceCanvas.style.cursor = 'grab';

    // verifica se a pe√ßa est√° dentro da toler√¢ncia em rela√ß√£o ao targetX
    const stageRect = mainCanvas.getBoundingClientRect();
    const currentLeft = parseInt(pieceCanvas.style.left, 10) || 0;
    // note: targetX est√° na escala do canvas; currentLeft est√° em pixels relativos ao mesmo canvas
    if (Math.abs(currentLeft - targetX) <= tolerance) {
        // sucesso!
        pieceCanvas.style.left = targetX + 'px';
        captchaMessage.textContent = 'Captcha resolvido com sucesso!';
        captchaMessage.classList.remove('error');
        captchaMessage.classList.add('success');

        // pequena anima√ß√£o de sucesso / delay antes de prosseguir
        setTimeout(() => {
            showCaptchaModal(false);
            if (typeof solvedCallback === 'function') solvedCallback(true);
        }, 700);
    } else {
        // falhou: exibe mensagem e permite tentar novamente (sem bot√µes)
        captchaMessage.textContent = 'Tente novamente ‚Äî a pe√ßa n√£o est√° alinhada.';
        captchaMessage.classList.add('error');
        // reset parcial: voltar para a posi√ß√£o inicial
        pieceCanvas.style.left = pieceStartX + 'px';
    }
}

function showCaptchaModal(show) {
    if (show) {
        captchaModal.setAttribute('aria-hidden', 'false');
        captchaModal.style.display = 'flex';
    } else {
        captchaModal.setAttribute('aria-hidden', 'true');
        captchaModal.style.display = 'none';
    }
}

// === integra√ß√£o com o fluxo de submiss√£o do formul√°rio ===
loginForm.addEventListener('submit', function (e) {
    e.preventDefault();

    // remove mensagens de erro anteriores
    const errorMessages = document.querySelectorAll('.error-message');
    errorMessages.forEach(msg => msg.remove());

    passwordInput.classList.remove('error');
    confirmInput.classList.remove('error');

    // pega os valores dos campos
    const password = passwordInput.value;
    const confirmPassword = confirmInput.value;

    let hasError = false;

    // valida senha com todos os requisitos acumulados at√© a fase atual
    if (!isPasswordValid(password)) {
        // mostra mensagem de erro sempre que o usu√°rio tentar submeter sem atender a requisitos
        showError('password', 'A senha n√£o atende a todos os requisitos');
        hasError = true;
        // atualiza requisito atual mostrado ao usu√°rio
        updatePasswordRequirement(password);
    }
    if (password !== confirmPassword) {
        // mostra mensagem de erro sempre que as senhas estiverem diferentes no submit
        showError('confirmPassword', 'As senhas n√£o coincidem');
        hasError = true;
    }

    // se n√£o houver erro e for fase 2 -> exibe captcha (nova etapa entre fase 2 e 3)
    if (!hasError && validationPhase === 2) {
        // Ao inv√©s de avan√ßar diretamente, inicializamos o captcha e s√≥ avan√ßamos se for resolvido
        initCaptcha(function(solved) {
            if (solved) {
                // avan√ßa para fase 3
                validationPhase = 3;
                passwordRequirements.classList.add('show');
                updatePasswordRequirement(passwordInput.value);
                passwordInput.focus();
                setButtonState();
            } else {
                // se por algum motivo n√£o resolveu, mantemos na fase 2
                setButtonState();
            }
        });
        return;
    }

    // Se n√£o houver erro e N√ÉO estivermos na fase 2 (com captcha), o comportamento anterior segue:
    if (!hasError && validationPhase < 4) {
        const loader = document.getElementById('loader');
        loader.style.display = 'flex';
        setTimeout(() => {
            loader.style.display = 'none';
            validationPhase = validationPhase + 1;
            passwordRequirements.classList.add('show');
            updatePasswordRequirement(passwordInput.value);
            passwordInput.focus();
            setButtonState();
        }, 1800);
    } else {
        // Se houver erro, o usu√°rio ver√° as mensagens acima.
        // Se estiver na fase final (4) e n√£o houver erro, aqui √© onde poderia ocorrer a autentica√ß√£o real.
    }
});

// fun√ß√µes auxiliares de mensagens/limpeza
function showError(fieldId, message) {
    const field = document.getElementById(fieldId);
    if (!field) return;

    field.classList.add('error');

    // Remove mensagens antigas
    const formGroup = field.closest('.form-group');
    const oldError = formGroup.querySelector('.error-message');
    if (oldError) oldError.remove();

    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.textContent = message;

    formGroup.appendChild(errorDiv);
    // traz foco para o campo com erro (ajuda na acessibilidade)
    field.focus();
}

function clearFieldError(fieldId) {
    const field = document.getElementById(fieldId);
    if (!field) return;
    field.classList.remove('error');
    const formGroup = field.closest('.form-group');
    const oldError = formGroup.querySelector('.error-message');
    if (oldError) oldError.remove();
}
